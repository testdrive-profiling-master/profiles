local	Arg				= ArgTable("Processor Generator. v1.0")

-- check arguments
Arg:AddOptionFile	("config", nil, nil, nil, "excel_config_file", "set configuration excel file")

if (Arg:DoParse() == false) then
	os.exit(0)
end

-- set target file and folder
sInFilename			= "main.lua"
sOutPath			= "../rtl"

-- setup configurations
config	= {}

do
	-- default value
	config.core_size		= 4
	config.m_addr_width		= 32
	config.m_data_width		= 512
	config.s_base_addr		= "32'h10000000"

	local	config_file_name	= Arg:GetOptionFile("config", 0)
	
	if config_file_name ~= nil then
		local config_table = excel_read_table("config.xlsx", "configuration", "Confiuration", true, "A3")
		
		if config_table ~= nil then
			config.core_size		= config_table.CORE_SIZE.Value
			config.m_addr_width		= config_table.M_ADDR_WIDTH.Value
			config.clock_speed		= config_table.CLK_SPEED.Value
		else
			LOGE("Can't load EXCEL configuration file.")
			os.exit(1)
		end
	end
	
	-- check environment variable override
	do
		local sEnv = String("")
		sEnv:GetEnvironment("SIM_DEFINITION")
		
		while sEnv.TokenizePos >= 0 do
			local	sTok	= sEnv:Tokenize(" ")
			
			if sEnv.TokenizePos < 0 then
				break
			end
			
			if sTok:CompareFront("-D") then
				sTok:erase(0, 2)
				
				local	sID		= sTok:Tokenize("=")
				local	sVal	= sTok:Tokenize("=")
				
				if sID ~= nil and sVal ~= nil then
					if sID.s == "CORE_SIZE" then
						config.core_size	= tonumber(sVal.s)
					end
				end
			end
		end
	end
end


-- show up configurations
LOGI("Current configuration")
print("\t- CORE_SIZE           : " .. config.core_size)
print("\t- M_ADDR_WIDTH        : " .. config.m_addr_width)
print("\t- M_DATA_WIDTH        : " .. config.m_data_width)
print("")


-- delete previous codes
exec("rm -f ../rtl/*.sv")
exec("rm -f ../rtl/*.vh")
exec("rm -f ../rtl/*.f")
exec("rm -f ../rtl/*.svg")
exec("rm -f ../rtl/html/*.html")

LOGI("Now verilog code generation in progress...\n")
